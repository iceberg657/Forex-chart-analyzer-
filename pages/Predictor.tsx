

import React, { useState, useEffect } from 'react';
import { getPredictions } from '../services/predictorService';
import { PredictedEvent } from '../types';
import Spinner from '../components/Spinner';
import ErrorDisplay from '../components/ErrorDisplay';
import { usePageData } from '../hooks/usePageData';

const SignalCard: React.FC<{ signal: PredictedEvent }> = ({ signal }) => {
    const { asset, action, price, timestamp, confidence, target_price, stop_loss, strategy_id } = signal;

    const actionInfo = {
        BUY: { color: 'green', icon: 'fa-arrow-trend-up', text: 'BUY' },
        SELL: { color: 'red', icon: 'fa-arrow-trend-down', text: 'SELL' },
        HOLD: { color: 'gray', icon: 'fa-circle-pause', text: 'HOLD' }
    };
    const { color, icon, text } = actionInfo[action];
    
    const confidencePercentage = (confidence * 100).toFixed(0);

    return (
        <div className={`bg-black/10 dark:bg-white/5 border-l-4 border-${color}-500 p-4 rounded-lg shadow-md flex flex-col gap-3`}>
            <div className="flex justify-between items-start">
                <div>
                    <p className="font-bold text-xl text-gray-900 dark:text-white">{asset}</p>
                    <p className="text-xs text-gray-500 dark:text-gray-400 font-mono">{strategy_id}</p>
                </div>
                <div className={`text-center text-${color}-500 flex items-center gap-2 px-3 py-1 rounded-full bg-${color}-500/10`}>
                    <i className={`fas ${icon} text-lg`}></i>
                    <span className="font-bold text-lg">{text}</span>
                </div>
            </div>
            
             <div className="grid grid-cols-2 sm:grid-cols-4 gap-3 text-sm">
                <div className="bg-black/5 dark:bg-white/5 p-2 rounded-md">
                    <div className="text-gray-500 dark:text-gray-400 text-xs">Signal Price</div>
                    <div className="font-bold text-gray-800 dark:text-gray-200">{price.toFixed(4)}</div>
                </div>
                 <div className="bg-black/5 dark:bg-white/5 p-2 rounded-md">
                    <div className="text-gray-500 dark:text-gray-400 text-xs">Target Price</div>
                    <div className="font-bold text-green-600 dark:text-green-400">{target_price?.toFixed(4) ?? 'N/A'}</div>
                </div>
                 <div className="bg-black/5 dark:bg-white/5 p-2 rounded-md">
                    <div className="text-gray-500 dark:text-gray-400 text-xs">Stop Loss</div>
                    <div className="font-bold text-red-600 dark:text-red-400">{stop_loss?.toFixed(4) ?? 'N/A'}</div>
                </div>
                <div className="bg-black/5 dark:bg-white/5 p-2 rounded-md">
                    <div className="text-gray-500 dark:text-gray-400 text-xs">Confidence</div>
                     <div className="w-full bg-gray-300 dark:bg-gray-700 rounded-full h-2.5 mt-1">
                        <div className={`bg-${color}-500 h-2.5 rounded-full`} style={{ width: `${confidencePercentage}%` }}></div>
                    </div>
                    <div className={`font-bold text-${color}-500 text-right text-xs`}>{confidencePercentage}%</div>
                </div>
            </div>

            <p className="text-xs text-gray-500 dark:text-gray-400 text-right mt-1">
                {new Date(timestamp).toLocaleString()}
            </p>
        </div>
    );
};

const Predictor: React.FC = () => {
    const { pageData, setPredictorData } = usePageData();
    const { events, error } = pageData.predictor;
    const [isLoading, setIsLoading] = useState(!events);

    const fetchPredictions = async () => {
        setIsLoading(true);
        try {
            const predictions = await getPredictions();
            // Sort by timestamp, newest first
            const sortedPredictions = predictions.sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());
            setPredictorData({ events: sortedPredictions, error: null });
        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : 'An unknown error occurred.';
            setPredictorData({ events, error: errorMessage });
        } finally {
            setIsLoading(false);
        }
    };
    
    useEffect(() => {
        if (!events) {
            fetchPredictions();
        }
    }, []);

    return (
        <div>
            <div className="text-center mb-8">
                <h1 className="text-4xl font-bold text-gray-900 dark:text-white">AI Trading Signal Feed</h1>
                <p className="text-gray-600 dark:text-gray-400 mt-2">Live trading signals generated by our Apex AI Oracle.</p>
            </div>

            <div className="bg-white/20 dark:bg-black/20 backdrop-blur-xl border border-white/30 dark:border-white/10 rounded-2xl shadow-lg p-6">
                <div className="flex justify-between items-center mb-4">
                    <h2 className="text-xl font-semibold">Live Signals</h2>
                    <button onClick={fetchPredictions} disabled={isLoading} className="text-sm text-red-500 hover:text-red-700 disabled:opacity-50">
                        <i className={`fas fa-sync ${isLoading ? 'animate-spin' : ''}`}></i> Refresh
                    </button>
                </div>

                {isLoading && <div className="py-10"><Spinner /></div>}
                {error && !isLoading && <ErrorDisplay error={error} />}

                {!isLoading && !error && (
                    <div className="space-y-4">
                        {events && events.length > 0 ? (
                            events.map((event, index) => <SignalCard key={index} signal={event} />)
                        ) : (
                            <p className="text-center text-gray-500 dark:text-gray-400 py-8">No active signals at the moment. The Oracle is contemplating the markets.</p>
                        )}
                    </div>
                )}
            </div>
        </div>
    );
};

export default Predictor;
