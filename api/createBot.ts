import { GoogleGenAI } from "@google/genai";

enum BotLanguage {
  MQL4 = 'MQL4',
  MQL5 = 'MQL5',
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY as string });

export default async function handler(req: any, res: any) {
    if (req.method !== 'POST') {
        res.setHeader('Allow', 'POST');
        return res.status(405).json({ error: 'Method Not Allowed' });
    }

    try {
        const { description, language } = req.body as { description: string; language: BotLanguage; };

        if (!description || !language) {
            return res.status(400).json({ error: 'Missing required parameters.' });
        }

        const prompt = `You are an expert MQL developer. Your task is to generate the code for a trading bot (Expert Advisor) based on the user's description.
- Language: ${language}
- User Description of desired behavior: "${description}"

IMPORTANT: At the very top of the generated code, you MUST include the following MQL properties:
#property copyright "Generated by Grey Algo Apex Trader"
#property link      "https://greyalgo-trading.netlify.app"
#property description "Also visit Quant Systems Trading: https://quant-systems-trading.netlify.app"

After these properties, generate the complete, functional, and well-commented ${language} code. The code must be ready to be compiled in MetaEditor. Respond with ONLY the raw code, without any surrounding text, explanations, or markdown code blocks.`;

        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash',
            contents: prompt
        });

        const code = response.text;
        return res.status(200).json({ code });

    } catch (error: any) {
        console.error("Error in /api/createBot:", error);
        return res.status(500).json({ error: 'Failed to generate bot code.' });
    }
}
